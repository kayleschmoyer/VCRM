// <auto-generated>
//  Purpose: Provides stub implementations for the legacy Vast desktop adapters so the shared factory compiles in this test harness.
//  These stubs throw at runtime because the VB.NET desktop adapters are not part of the hardened test build.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Data.Common;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.CommonContracts;
using CRMAdapter.CommonDomain;
using CRMAdapter.CommonInfrastructure;

namespace Vast.Adapter
{
    internal abstract class NotSupportedAdapterBase : IDisposable
    {
        protected static Task<T> FailAsync<T>() => Task.FromException<T>(new NotSupportedException("VAST_DESKTOP adapter is not available in this build."));

        public void Dispose()
        {
        }
    }

    internal sealed class CustomerAdapter : NotSupportedAdapterBase, ICustomerAdapter
    {
        public CustomerAdapter(DbConnection _, FieldMap __, ISqlRetryPolicy ___, IAdapterLogger ____, IAdapterRateLimiter _____)
        {
        }

        public Task<Customer?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) => FailAsync<Customer?>();

        public Task<IReadOnlyCollection<Customer>> GetRecentCustomersAsync(int maxResults, CancellationToken cancellationToken = default) => FailAsync<IReadOnlyCollection<Customer>>();

        public Task<IReadOnlyCollection<Customer>> SearchByNameAsync(string nameQuery, int maxResults, CancellationToken cancellationToken = default) => FailAsync<IReadOnlyCollection<Customer>>();
    }

    internal sealed class VehicleAdapter : NotSupportedAdapterBase, IVehicleAdapter
    {
        public VehicleAdapter(DbConnection _, FieldMap __, ISqlRetryPolicy ___, IAdapterLogger ____, IAdapterRateLimiter _____)
        {
        }

        public Task<IReadOnlyCollection<Vehicle>> GetByCustomerAsync(Guid customerId, int maxResults, CancellationToken cancellationToken = default) => FailAsync<IReadOnlyCollection<Vehicle>>();

        public Task<Vehicle?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) => FailAsync<Vehicle?>();
    }

    internal sealed class InvoiceAdapter : NotSupportedAdapterBase, IInvoiceAdapter
    {
        public InvoiceAdapter(DbConnection _, FieldMap __, ISqlRetryPolicy ___, IAdapterLogger ____, IAdapterRateLimiter _____)
        {
        }

        public Task<IReadOnlyCollection<Invoice>> GetByCustomerAsync(Guid customerId, int maxResults, CancellationToken cancellationToken = default) => FailAsync<IReadOnlyCollection<Invoice>>();

        public Task<Invoice?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) => FailAsync<Invoice?>();
    }

    internal sealed class AppointmentAdapter : NotSupportedAdapterBase, IAppointmentAdapter
    {
        public AppointmentAdapter(DbConnection _, FieldMap __, ISqlRetryPolicy ___, IAdapterLogger ____, IAdapterRateLimiter _____)
        {
        }

        public Task<IReadOnlyCollection<Appointment>> GetByDateAsync(DateTime date, int maxResults, CancellationToken cancellationToken = default) => FailAsync<IReadOnlyCollection<Appointment>>();

        public Task<Appointment?> GetByIdAsync(Guid id, CancellationToken cancellationToken = default) => FailAsync<Appointment?>();
    }
}
