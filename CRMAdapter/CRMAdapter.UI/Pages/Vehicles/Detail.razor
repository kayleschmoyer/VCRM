@* Detail.razor: Immersive vehicle 360 bringing together identity, owner, and lifecycle history. *@
@page "/vehicles/{VehicleId:guid}"
@attribute [Authorize(Policy = RbacPolicyNames.VehicleView)]
@inject IVehicleService VehicleRegistry
@inject IInvoiceService InvoiceWorkspace
@inject NavigationManager NavigationManager

<MudStack Spacing="3" Class="crm-vehicle-detail">
    <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1" Justify="Justify.SpaceBetween">
        <MudButton Variant="Variant.Text"
                   StartIcon="@Icons.Material.Filled.ArrowBack"
                   OnClick="NavigateBack"
                   Color="Color.Default">
            Back to vehicles
        </MudButton>
        @if (_vehicle is not null)
        {
            <MudChip Color="Color.Info" Variant="Variant.Outlined" Icon="@Icons.Material.Filled.Bolt" Class="crm-detail-chip">
                Last serviced @FormatServiceDate(_vehicle.LastServiceDate)
            </MudChip>
        }
    </MudStack>

    @if (_isLoading)
    {
        <MudPaper Elevation="0" Class="pa-6">
            <MudProgressCircular Indeterminate="true" Size="Size.Large" />
        </MudPaper>
    }
    else if (_vehicle is null)
    {
        <MudPaper Elevation="1" Class="pa-6 text-center">
            <MudIcon Icon="@Icons.Material.Filled.DirectionsCar" Size="Size.Large" Color="Color.Secondary" Class="mb-2" />
            <MudText Typo="Typo.h6">We could not locate that vehicle</MudText>
            <MudText Typo="Typo.body2" Class="mud-secondary-text">Try launching it from the vehicles workspace or a customer profile.</MudText>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Class="mt-4" OnClick="NavigateBack">Return to vehicles</MudButton>
        </MudPaper>
    }
    else
    {
        <MudGrid Spacing="3">
            <MudItem Xs="12" Lg="5">
                <VehicleCard Vin="@_vehicle.Vin"
                             Year="@_vehicle.Year"
                             Make="@_vehicle.Make"
                             Model="@_vehicle.Model"
                             Plate="@_vehicle.Plate"
                             Status="@_vehicle.Status"
                             StatusColor="@StatusColorCatalog.Resolve(_vehicle.Status)"
                             OwnerName="@_vehicle.Owner.Name"
                             OwnerHref="@GetCustomerUrl(_vehicle.Owner.Id)"
                             OwnerContact="@_vehicle.Owner.PrimaryContact">
                    <MudStack Spacing="1.5">
                        <MudStack Spacing="0.5">
                            <MudText Typo="Typo.overline">Last service</MudText>
                            <MudText Typo="Typo.subtitle2">@FormatServiceDate(_vehicle.LastServiceDate)</MudText>
                        </MudStack>
                        @if (!string.IsNullOrWhiteSpace(_vehicle.Notes))
                        {
                            <MudPaper Elevation="0" Class="crm-vehicle-notes">
                                <MudText Typo="Typo.overline" Class="mb-1">Vehicle narrative</MudText>
                                <MudText Typo="Typo.body2">@_vehicle.Notes</MudText>
                            </MudPaper>
                        }
                    </MudStack>
                </VehicleCard>
            </MudItem>
            <MudItem Xs="12" Lg="7">
                <MudPaper Elevation="1" Class="crm-detail-tabs">
                    <MudTabs Rounded="true" ApplyEffects="true" KeepPanelsAlive="true">
                        <MudTabPanel Text="Invoices" Icon="@Icons.Material.Filled.ReceiptLong">
                            <MudTable Items="@_vehicleInvoices"
                                      Dense="true"
                                      Hover="true"
                                      Breakpoint="Breakpoint.Sm"
                                      OnRowClick="NavigateToInvoice"
                                      RowClassFunc="@(_ => \"crm-invoice-row\")">
                                <HeaderContent>
                                    <MudTh>Invoice</MudTh>
                                    <MudTh>Date</MudTh>
                                    <MudTh>Total</MudTh>
                                    <MudTh>Balance</MudTh>
                                    <MudTh>Status</MudTh>
                                    <MudTh class="text-right">Actions</MudTh>
                                </HeaderContent>
                                <RowTemplate>
                                    <MudTd DataLabel="Invoice">
                                        <MudText Typo="Typo.subtitle2">@context.InvoiceNumber</MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Date">@context.IssuedOn.ToString("MMM dd, yyyy")</MudTd>
                                    <MudTd DataLabel="Total">@FormatCurrency(context.Total)</MudTd>
                                    <MudTd DataLabel="Balance">
                                        <MudText Typo="Typo.subtitle2" Color="@(context.BalanceDue > 0 ? Color.Error : Color.Default)">
                                            @FormatCurrency(context.BalanceDue)
                                        </MudText>
                                    </MudTd>
                                    <MudTd DataLabel="Status">
                                        <StatusChip Status="@context.Status" />
                                    </MudTd>
                                    <MudTd DataLabel="Actions" Class="text-right">
                                        <MudButton Variant="Variant.Text"
                                                   Color="Color.Primary"
                                                   OnClick="@(() => NavigateToInvoice(context.Id))">
                                            View
                                        </MudButton>
                                    </MudTd>
                                </RowTemplate>
                            </MudTable>
                        </MudTabPanel>
                        <MudTabPanel Text="Appointments" Icon="@Icons.Material.Filled.EventAvailable">
                            <HistoryTable Items="@AppointmentEntries"
                                          PrimaryLabel="When"
                                          SecondaryLabel="Subject"
                                          TertiaryLabel="Owner"
                                          EnableSelection="true"
                                          OnEntrySelected="NavigateToAppointment" />
                        </MudTabPanel>
                    </MudTabs>
                </MudPaper>
            </MudItem>
        </MudGrid>
    }
</MudStack>

@code {
    [Parameter]
    public Guid VehicleId { get; set; }

    private VehicleDetail? _vehicle;
    private List<InvoiceSummary> _vehicleInvoices = new();
    private bool _isLoading;

    private IReadOnlyList<HistoryEntry> AppointmentEntries => _vehicle?.Appointments
        .OrderBy(a => a.ScheduledFor)
        .Select(appointment => new HistoryEntry(
            appointment.ScheduledFor.ToLocalTime().ToString("MMM dd, yyyy h:mm tt"),
            appointment.Subject,
            appointment.Owner,
            null,
            appointment.Status,
            StatusColorCatalog.Resolve(appointment.Status),
            appointment.Id))
        .ToList() ?? Array.Empty<HistoryEntry>();

    protected override async Task OnParametersSetAsync()
    {
        _isLoading = true;
        _vehicle = await VehicleRegistry.GetVehicleAsync(VehicleId);
        _vehicleInvoices = _vehicle is null
            ? new List<InvoiceSummary>()
            : (await InvoiceWorkspace.GetInvoicesForVehicleAsync(_vehicle.Id)).ToList();
        _isLoading = false;
    }

    private void NavigateBack()
    {
        NavigationManager.NavigateTo("/vehicles");
    }

    private string GetCustomerUrl(Guid customerId)
    {
        return $"/customers/{customerId}";
    }

    private void NavigateToInvoice(TableRowClickEventArgs<InvoiceSummary> args)
    {
        NavigationManager.NavigateTo($"/invoices/{args.Item.Id}");
    }

    private void NavigateToInvoice(Guid invoiceId)
    {
        NavigationManager.NavigateTo($"/invoices/{invoiceId}");
    }

    private void NavigateToAppointment(HistoryEntry entry)
    {
        if (entry.ReferenceId.HasValue)
        {
            NavigationManager.NavigateTo($"/appointments/{entry.ReferenceId.Value}");
        }
    }

    private static string FormatCurrency(decimal amount)
    {
        return string.Format(System.Globalization.CultureInfo.CurrentCulture, "{0:C}", amount);
    }

    private static string FormatServiceDate(DateTime? date)
    {
        return date.HasValue ? date.Value.ToString("MMM dd, yyyy") : "not yet";
    }
}
