// <auto-generated>
//  Purpose: Validates field map sanitisation to defend against SQL expression injection.
//  What is being validated: Ensures mapping loader rejects subqueries/whitespace and enforces schema-qualified identifiers.
//  Success: Unsafe expressions throw MappingConfigurationException; canonical bracketed identifiers remain accepted.
// </auto-generated>
#nullable enable
using CRMAdapter.CommonConfig;
using CRMAdapter.Tests.TestUtilities.Helpers;
using FluentAssertions;
using Xunit;

namespace CRMAdapter.Tests.UnitTests;

public sealed class FieldMap_ShouldRejectUnsafeMappings
{
    [Theory]
    [Trait("Type", "Unit")]
    [InlineData("(SELECT TOP 1 name FROM sys.sql_logins)")]
    [InlineData("Customer.Name; DROP TABLE")]
    [InlineData("[crm].[Customer].[Display Name]")]
    [InlineData("[crm].[Customer].[Name)]")]
    public void LoadFromJson_ShouldThrow_WhenColumnMappingContainsUnsafeTokens(string expression)
    {
        // Arrange
        var json = CreateMappingJson(columnExpression: expression);

        // Act
        var action = () => MappingLoaderForTests.LoadFromJson(json);

        // Assert
        action.Should().Throw<MappingConfigurationException>()
            .WithMessage("*Customer.Name*");
    }

    [Theory]
    [Trait("Type", "Unit")]
    [InlineData("[crm].[Customer].[Extra]")]
    [InlineData("crm.Customer.Profile")]
    [InlineData("Customer")] 
    public void LoadFromJson_ShouldThrow_WhenEntitySourceIsNotSchemaQualifiedTable(string source)
    {
        // Arrange
        var json = CreateMappingJson(columnExpression: "[crm].[Customer].[DisplayName]", sourceOverride: source);

        // Act
        var action = () => MappingLoaderForTests.LoadFromJson(json);

        // Assert
        action.Should().Throw<MappingConfigurationException>()
            .WithMessage("*Customer.__source*");
    }

    [Fact]
    [Trait("Type", "Unit")]
    public void LoadFromJson_ShouldAllowBracketedIdentifiers()
    {
        // Arrange
        const string expected = "[crm].[Customer].[DisplayName]";
        var json = CreateMappingJson(columnExpression: expected, sourceOverride: "[crm].[Customer]");

        // Act
        var fieldMap = MappingLoaderForTests.LoadFromJson(json);

        // Assert
        fieldMap.GetTarget("Customer.Name").Should().Be(expected);
    }

    private static string CreateMappingJson(string columnExpression, string? sourceOverride = null)
    {
        var source = sourceOverride ?? "[crm].[Customer]";
        return $@"{{
  ""backendName"": ""VastOnline"",
  ""schemaVersion"": ""1.0"",
  ""mappings"": {{
    ""Customer"": {{
      ""__source"": ""{source}"",
      ""Id"": ""[crm].[Customer].[CustomerGuid]"",
      ""Name"": ""{columnExpression}""
    }}
  }}
}}";
    }
}
