// <auto-generated>
//  Purpose: Confirms appointment adapter rejects missing mappings and enforces safe date-bound queries.
//  Whatâ€™s being validated: Configuration guard rails and date-range parameterization when enumerating appointments.
//  Success: Constructor fails fast on invalid mappings and GetByDateAsync submits sanitized @start/@end parameters.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Xunit;

namespace CRMAdapter.Tests.UnitTests;

public sealed class AppointmentAdapter_ShouldThrowOnMissingConfig
{
    [Fact]
    [Trait("Type", "Unit")]
    public void Constructor_ShouldGuardAgainstMissingMappings()
    {
        // Arrange
        var json = """
        {
          "backendName": "VastOnline",
          "schemaVersion": "1.0",
          "mappings": {
            "Appointment": {
              "__source": "[dbo].[Appointments]",
              "Id": "[dbo].[Appointments].[AppointmentId]"
            }
          }
        }
        """;

        var fieldMap = MappingLoaderForTests.LoadFromJson(json);

        // Act
        var action = () => new AppointmentAdapter(FakeDbConnectionFactory.Create(), fieldMap);

        // Assert
        action.Should().Throw<MappingConfigurationException>()
            .WithMessage("*Appointment.CustomerId*");
    }

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetByDateAsync_ShouldParameterizeWindow()
    {
        // Arrange
        var date = new DateTime(2024, 01, 05, 13, 0, 0, DateTimeKind.Utc);
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "AppointmentAdapter.GetByDate",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = Guid.NewGuid(),
                        ["CustomerId"] = Guid.NewGuid(),
                        ["VehicleId"] = Guid.NewGuid(),
                        ["Start"] = date.AddHours(1),
                        ["End"] = date.AddHours(2),
                        ["Advisor"] = "Sam",
                        ["Status"] = "Scheduled",
                        ["Location"] = "Main"
                    }
                },
                command =>
                {
                    command.ParametersSnapshot.Should().ContainSingle(p => p.ParameterName == "@start" && ((DateTime)p.Value!).Date == date.Date);
                    command.ParametersSnapshot.Should().ContainSingle(p => p.ParameterName == "@end" && ((DateTime)p.Value!).Date == date.AddDays(1).Date);
                }));

        var fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");
        using var adapter = new AppointmentAdapter(connection, fieldMap);

        // Act
        var results = await adapter.GetByDateAsync(date, 10, CancellationToken.None);

        // Assert
        results.Should().ContainSingle();
    }
}
