// <auto-generated>
//  Purpose: Ensures invoice adapter materializes canonical invoices with resilient handling for optional data.
//  Whatâ€™s being validated: Proper SQL parameterization, null handling for invoice lines, and canonical mapping projections.
//  Success: Adapter returns invoices with empty line collections when no rows are returned; failure pinpoints the adapter method and mapping key.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.CommonDomain;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Xunit;

namespace CRMAdapter.Tests.UnitTests;

public sealed class InvoiceAdapter_ShouldHandleNulls
{
    private readonly FieldMap _fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetById_ShouldReturnInvoice_WithEmptyLinesWhenNoneExist()
    {
        // Arrange
        var invoiceId = Guid.NewGuid();
        var customerId = Guid.NewGuid();
        var vehicleId = Guid.NewGuid();
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "InvoiceAdapter.GetById",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = invoiceId,
                        ["CustomerId"] = customerId,
                        ["VehicleId"] = vehicleId,
                        ["Number"] = "INV-001",
                        ["Date"] = DateTime.UtcNow,
                        ["Total"] = 199.95m,
                        ["Status"] = "Paid"
                    }
                },
                command =>
                {
                    command.ParametersSnapshot.Should().ContainSingle(p => p.ParameterName == "@id" && (Guid)p.Value! == invoiceId);
                }),
            FakeDbConnectionFactory.Plan(
                "InvoiceAdapter.LoadInvoiceLines",
                Array.Empty<IDictionary<string, object?>>()));

        using var adapter = new InvoiceAdapter(connection, _fieldMap);

        // Act
        var result = await adapter.GetByIdAsync(invoiceId, CancellationToken.None);

        // Assert
        result.Should().NotBeNull();
        result!.LineItems.Should().BeEmpty();
        result.CustomerId.Should().Be(customerId);
        result.VehicleId.Should().Be(vehicleId);
    }

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetByCustomerAsync_ShouldAggregateLinesPerInvoice()
    {
        // Arrange
        var customerId = Guid.NewGuid();
        var invoiceId = Guid.NewGuid();
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "InvoiceAdapter.GetByCustomer",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = invoiceId,
                        ["CustomerId"] = customerId,
                        ["VehicleId"] = Guid.NewGuid(),
                        ["Number"] = "INV-002",
                        ["Date"] = DateTime.UtcNow,
                        ["Total"] = 299.95m,
                        ["Status"] = "Pending"
                    }
                }),
            FakeDbConnectionFactory.Plan(
                "InvoiceAdapter.LoadInvoiceLines",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["InvoiceId"] = invoiceId,
                        ["Description"] = "Labour",
                        ["Quantity"] = 2m,
                        ["UnitPrice"] = 50m,
                        ["Tax"] = 5m
                    }
                }));

        using var adapter = new InvoiceAdapter(connection, _fieldMap);

        // Act
        var result = await adapter.GetByCustomerAsync(customerId, 10, CancellationToken.None);

        // Assert
        var invoice = result.Should().ContainSingle().Subject;
        invoice.LineItems.Should().ContainSingle(line => line.Description == "Labour" && line.Quantity == 2m);
    }
}
