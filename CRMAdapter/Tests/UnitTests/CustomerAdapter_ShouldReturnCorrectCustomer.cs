// <auto-generated>
//  Purpose: Validates the Vast Online customer adapter returns canonical customers with safe SQL and mapping enforcement.
//  Whatâ€™s being validated: Parameterization, mapping usage, vehicle enrichment, and deterministic logging for failure scenarios.
//  Success: Adapter returns the expected customer aggregate without leaking SQL injection vectors; failure surfaces the exact method, parameters, and mapping key to fix.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.CommonContracts;
using CRMAdapter.CommonDomain;
using CRMAdapter.Tests.TestUtilities.DataBuilders;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Xunit;

namespace CRMAdapter.Tests.UnitTests;

public sealed class CustomerAdapter_ShouldReturnCorrectCustomer
{
    private readonly FieldMap _fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetById_ShouldReturnCustomer_WhenCustomerExists()
    {
        // Arrange
        var customerId = Guid.NewGuid();
        var vehicleId = Guid.NewGuid();
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.GetById",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = customerId,
                        ["Name"] = "Ada Lovelace",
                        ["Email"] = "ada@example.com",
                        ["Phone"] = "+15555550123",
                        ["AddressLine1"] = "123 Innovation Way",
                        ["AddressLine2"] = DBNull.Value,
                        ["City"] = "London",
                        ["State"] = "LDN",
                        ["PostalCode"] = "EC1A 1BB",
                        ["Country"] = "UK"
                    }
                },
                command =>
                {
                    command.CommandText.Should().Contain("FROM [dbo].[Customers]");
                    command.ParametersSnapshot.Should().ContainSingle(parameter =>
                        parameter.ParameterName == "@id" && (Guid)parameter.Value! == customerId);
                }),
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.LoadVehicleReferences",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["VehicleId"] = vehicleId,
                        ["CustomerId"] = customerId,
                        ["Vin"] = "VIN00001"
                    }
                }));

        using var adapter = new CustomerAdapter(connection, _fieldMap);
        var expectedVehicle = VehicleBuilder.Default().WithId(vehicleId).WithCustomerId(customerId).WithVin("VIN00001").BuildReference();
        var expectedCustomer = CustomerBuilder.Default()
            .WithId(customerId)
            .WithDisplayName("Ada Lovelace")
            .WithEmail("ada@example.com")
            .WithVehicles(new[] { expectedVehicle })
            .Build();

        // Act
        var result = await adapter.GetByIdAsync(customerId, CancellationToken.None);

        // Assert
        result.Should().NotBeNull();
        result!.Should().BeEquivalentTo(expectedCustomer, options => options
            .Including(customer => customer.Id)
            .Including(customer => customer.DisplayName)
            .Including(customer => customer.Email)
            .Including(customer => customer.PrimaryPhone)
            .Including(customer => customer.PostalAddress)
            .Including(customer => customer.Vehicles));
    }

    [Fact]
    [Trait("Type", "Unit")]
    public async Task SearchByName_ShouldTrimAndParameterizeInput()
    {
        // Arrange
        var capturedLimit = 0;
        var capturedName = string.Empty;
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.SearchByName",
                Array.Empty<IDictionary<string, object?>>(),
                command =>
                {
                    command.CommandText.Should().Contain("LIKE @name");
                    capturedLimit = Convert.ToInt32(command.ParametersSnapshot
                        .Should()
                        .ContainSingle(p => p.ParameterName == "@limit")
                        .Subject.Value);
                    capturedName = command.ParametersSnapshot
                        .Should()
                        .ContainSingle(p => p.ParameterName == "@name")
                        .Subject.Value?.ToString() ?? string.Empty;
                }));

        using var adapter = new CustomerAdapter(connection, _fieldMap);

        // Act
        _ = await adapter.SearchByNameAsync("  Ada  ", 25, CancellationToken.None);

        // Assert
        capturedLimit.Should().Be(25);
        capturedName.Should().Be("%Ada%");
    }

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetRecentCustomers_ShouldRespectDefaultLimit_WhenRequestIsZero()
    {
        // Arrange
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.GetRecent",
                Array.Empty<IDictionary<string, object?>>(),
                command =>
                {
                    command.ParametersSnapshot.Should().ContainSingle(parameter =>
                        parameter.ParameterName == "@limit" && (int)parameter.Value! == 100);
                }));

        using var adapter = new CustomerAdapter(connection, _fieldMap);

        // Act
        _ = await adapter.GetRecentCustomersAsync(0, CancellationToken.None);

        // Assert
        connection.State.Should().Be(System.Data.ConnectionState.Open);
    }
}
