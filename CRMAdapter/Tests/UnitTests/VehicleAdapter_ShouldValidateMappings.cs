// <auto-generated>
//  Purpose: Exercises vehicle adapter guard rails including mapping validation and SQL parameterization.
//  Whatâ€™s being validated: Ensures required mappings exist and list queries honor safety limits with canonical projections.
//  Success: Constructor rejects malformed mappings and GetByCustomerAsync emits parameterised SQL; failure names the offending key.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.CommonContracts;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Xunit;

namespace CRMAdapter.Tests.UnitTests;

public sealed class VehicleAdapter_ShouldValidateMappings
{
    [Fact]
    [Trait("Type", "Unit")]
    public void Constructor_ShouldThrowMappingConfigurationException_WhenVehicleMappingMissing()
    {
        // Arrange
        var json = """
        {
          "backendName": "VastOnline",
          "schemaVersion": "1.0",
          "mappings": {
            "Vehicle": {
              "__source": "[dbo].[Vehicles]",
              "Id": "[dbo].[Vehicles].[VehicleId]"
            }
          }
        }
        """;

        var fieldMap = MappingLoaderForTests.LoadFromJson(json);

        // Act
        var action = () => new VehicleAdapter(FakeDbConnectionFactory.Create(), fieldMap);

        // Assert
        action.Should().Throw<MappingConfigurationException>()
            .WithMessage("*Vehicle.Vin*")
            .Which.Message.Should().Contain("VehicleAdapter");
    }

    [Fact]
    [Trait("Type", "Unit")]
    public async Task GetByCustomerAsync_ShouldReturnVehicles_WithBoundedLimit()
    {
        // Arrange
        var customerId = Guid.NewGuid();
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "VehicleAdapter.GetByCustomer",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = Guid.Parse("aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa"),
                        ["CustomerId"] = customerId,
                        ["Vin"] = "VIN-123",
                        ["Make"] = "Tesla",
                        ["Model"] = "Model 3",
                        ["ModelYear"] = 2023,
                        ["Odometer"] = 4200
                    }
                },
                command =>
                {
                    command.CommandText.Should().Contain("ORDER BY [dbo].[Vehicles].[ModelYear] DESC");
                    command.ParametersSnapshot.Should().ContainSingle(p => p.ParameterName == "@customerId");
                    command.ParametersSnapshot.Should().ContainSingle(p => p.ParameterName == "@limit" && (int)p.Value! == 5);
                }));

        var fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");
        using var adapter = new VehicleAdapter(connection, fieldMap, defaultListLimit: 5);

        // Act
        var result = await adapter.GetByCustomerAsync(customerId, 5, CancellationToken.None);

        // Assert
        result.Should().HaveCount(1);
        result.Should().ContainSingle(vehicle => vehicle.Vin == "VIN-123" && vehicle.CustomerId == customerId);
    }
}
