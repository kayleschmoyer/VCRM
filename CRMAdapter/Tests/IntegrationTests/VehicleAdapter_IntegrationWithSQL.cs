// <auto-generated>
//  Purpose: Validates vehicle adapter queries against the SQL Server container using production mappings.
//  Whatâ€™s being validated: Canonical vehicle projections, customer scoping, and performance budget.
//  Success: Vehicles returned for the seeded customer within the configured limit and time budget; failure reports SQL timing.
// </auto-generated>
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.IntegrationTests;

[Collection("SqlServerContainer")]
public sealed class VehicleAdapter_IntegrationWithSQL
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public VehicleAdapter_IntegrationWithSQL(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "Integration")]
    public async Task GetByCustomerAsync_ShouldReturnSeededVehicle()
    {
        await _fixture.ResetDatabaseAsync();

        await using var connection = new SqlConnection(_fixture.ConnectionString);
        using var adapter = new VehicleAdapter(connection, _fixture.CreateFieldMap(), defaultListLimit: 10);

        var stopwatch = Stopwatch.StartNew();
        var vehicles = await adapter.GetByCustomerAsync(Guid.Parse("11111111-1111-1111-1111-111111111111"), 10, CancellationToken.None);
        stopwatch.Stop();
        _output.WriteLine($"VehicleAdapter.GetByCustomer duration: {stopwatch.ElapsedMilliseconds} ms");

        vehicles.Should().ContainSingle(vehicle => vehicle.Vin == "VIN00001");
        stopwatch.ElapsedMilliseconds.Should().BeLessThan(500);
    }
}
