// <auto-generated>
//  Purpose: Executes appointment adapter queries against the seeded SQL Server container.
//  Whatâ€™s being validated: Date range filtering, canonical projection, and performance envelope.
//  Success: Seeded appointment is returned for the requested day within SLA; failure outputs elapsed time and fix hints.
// </auto-generated>
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.IntegrationTests;

[Collection("SqlServerContainer")]
public sealed class AppointmentAdapter_IntegrationWithSQL
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public AppointmentAdapter_IntegrationWithSQL(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "Integration")]
    public async Task GetByDateAsync_ShouldReturnSeededAppointment()
    {
        await _fixture.ResetDatabaseAsync();

        await using var connection = new SqlConnection(_fixture.ConnectionString);
        using var adapter = new AppointmentAdapter(connection, _fixture.CreateFieldMap());

        var targetDate = DateTime.UtcNow.Date.AddDays(1);
        var stopwatch = Stopwatch.StartNew();
        var appointments = await adapter.GetByDateAsync(targetDate, 10, CancellationToken.None);
        stopwatch.Stop();
        _output.WriteLine($"AppointmentAdapter.GetByDate duration: {stopwatch.ElapsedMilliseconds} ms");

        appointments.Should().ContainSingle();
        stopwatch.ElapsedMilliseconds.Should().BeLessThan(500);
    }
}
