// <auto-generated>
//  Purpose: Executes the Vast Online customer adapter against a hardened SQL Server container.
//  Whatâ€™s being validated: Real SQL execution, canonical mapping resolution, and deterministic vehicle enrichment.
//  Success: The adapter returns the seeded customer with related vehicles in under 500 ms; failures emit timings and fix guidance.
// </auto-generated>
using System;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.IntegrationTests;

[Collection("SqlServerContainer")]
public sealed class CustomerAdapter_IntegrationWithSQL
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public CustomerAdapter_IntegrationWithSQL(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "Integration")]
    public async Task GetById_ShouldHydrateSeededCustomer()
    {
        await _fixture.ResetDatabaseAsync();

        await using var connection = new SqlConnection(_fixture.ConnectionString);
        using var adapter = new CustomerAdapter(connection, _fixture.CreateFieldMap());

        var stopwatch = Stopwatch.StartNew();
        var customer = await adapter.GetByIdAsync(Guid.Parse("11111111-1111-1111-1111-111111111111"), CancellationToken.None);
        stopwatch.Stop();

        _output.WriteLine($"CustomerAdapter.GetById duration: {stopwatch.ElapsedMilliseconds} ms");

        customer.Should().NotBeNull("seed data should include Ada Lovelace");
        customer!.DisplayName.Should().Be("Ada Lovelace");
        customer.Vehicles.Should().ContainSingle(vehicle => vehicle.Vin == "VIN00001");
        stopwatch.ElapsedMilliseconds.Should().BeLessThan(500);
    }
}
