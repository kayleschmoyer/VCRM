// <auto-generated>
//  Purpose: Runs invoice adapter queries against the ephemeral SQL container.
//  Whatâ€™s being validated: Invoice aggregation with line items and mapping consistency using real data.
//  Success: Seeded invoice is returned with both line items and expected totals; failures print timing diagnostics.
// </auto-generated>
using System;
using System.Diagnostics;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.IntegrationTests;

[Collection("SqlServerContainer")]
public sealed class InvoiceAdapter_IntegrationWithSQL
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public InvoiceAdapter_IntegrationWithSQL(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "Integration")]
    public async Task GetByCustomerAsync_ShouldReturnSeededInvoiceWithLines()
    {
        await _fixture.ResetDatabaseAsync();

        await using var connection = new SqlConnection(_fixture.ConnectionString);
        using var adapter = new InvoiceAdapter(connection, _fixture.CreateFieldMap());

        var stopwatch = Stopwatch.StartNew();
        var invoices = await adapter.GetByCustomerAsync(Guid.Parse("11111111-1111-1111-1111-111111111111"), 10, CancellationToken.None);
        stopwatch.Stop();
        _output.WriteLine($"InvoiceAdapter.GetByCustomer duration: {stopwatch.ElapsedMilliseconds} ms");

        invoices.Should().ContainSingle();
        var invoice = invoices.Single();
        invoice.LineItems.Should().HaveCount(2);
        invoice.TotalAmount.Should().Be(499.95m);
    }
}
