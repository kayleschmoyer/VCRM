// <auto-generated>
//  Purpose: Orchestrates a full CRM workflow across adapters against the SQL container.
//  What’s being validated: Factory configuration, canonical relationships across customer → vehicle → invoice → appointment.
//  Success: All adapters resolve consistent entities referencing the seeded identifiers; failure logs the method and remediation path.
// </auto-generated>
#nullable enable
using System;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Factory;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.Tests.TestUtilities.Helpers;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.EndToEndTests;

[Collection("SqlServerContainer")]
public sealed class CRM_FullWorkflow_CustomerVehicleInvoiceAppointment
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public CRM_FullWorkflow_CustomerVehicleInvoiceAppointment(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "EndToEnd")]
    public async Task VastOnlineAdapters_ShouldProduceConsistentAggregate()
    {
        await _fixture.ResetDatabaseAsync();

        var mappingPath = Path.Combine(Path.GetTempPath(), $"vastonline-{Guid.NewGuid():N}.json");
        var mappingJson = MappingLoaderForTests.LoadMappingJson("vastonline-test-mapping.json");
        await File.WriteAllTextAsync(mappingPath, mappingJson);

        try
        {
            var bundle = AdapterFactory.Create(
                "VAST_ONLINE",
                () => new SqlConnection(_fixture.ConnectionString),
                mappingPath,
                AdapterFactoryOptions.SecureDefaults());

            var customerAdapter = bundle.CustomerAdapter;
            var vehicleAdapter = bundle.VehicleAdapter;
            var invoiceAdapter = bundle.InvoiceAdapter;
            var appointmentAdapter = bundle.AppointmentAdapter;

            try
            {
                var customerId = Guid.Parse("11111111-1111-1111-1111-111111111111");
                var customer = await customerAdapter.GetByIdAsync(customerId, CancellationToken.None);
                customer.Should().NotBeNull("seed data must provide a baseline customer");

                var vehicles = await vehicleAdapter.GetByCustomerAsync(customerId, 10, CancellationToken.None);
                vehicles.Should().ContainSingle();
                var vehicle = vehicles.Single();

                var invoices = await invoiceAdapter.GetByCustomerAsync(customerId, 10, CancellationToken.None);
                invoices.Should().ContainSingle();
                var invoice = invoices.Single();
                invoice.VehicleId.Should().Be(vehicle.Id, "invoice should reference the customer vehicle");
                invoice.LineItems.Should().NotBeEmpty("seed invoice should contain line items");

                var appointments = await appointmentAdapter.GetByDateAsync(DateTime.UtcNow.Date.AddDays(1), 10, CancellationToken.None);
                appointments.Should().ContainSingle();
                var appointment = appointments.Single();
                appointment.CustomerId.Should().Be(customerId);
                appointment.VehicleId.Should().Be(vehicle.Id);

                var totalFromLines = invoice.LineItems.Sum(line => line.Quantity * line.UnitPrice + line.TaxAmount);
                ((double)totalFromLines).Should().BeApproximately((double)invoice.TotalAmount, 0.01, "line items should reconcile to invoice total");

                _output.WriteLine("Full workflow succeeded: customer={0}, vehicle={1}, invoice={2}, appointment={3}",
                    customer!.DisplayName,
                    vehicle.Vin,
                    invoice.InvoiceNumber,
                    appointment.Id);
            }
            finally
            {
                (customerAdapter as IDisposable)?.Dispose();
                (vehicleAdapter as IDisposable)?.Dispose();
                (invoiceAdapter as IDisposable)?.Dispose();
                (appointmentAdapter as IDisposable)?.Dispose();
            }
        }
        finally
        {
            if (File.Exists(mappingPath))
            {
                File.Delete(mappingPath);
            }
        }
    }
}
