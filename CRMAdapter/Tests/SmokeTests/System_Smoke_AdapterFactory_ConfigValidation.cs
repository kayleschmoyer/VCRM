// <auto-generated>
//  Purpose: Fast gating smoke test validating adapter factory wiring and configuration resolution.
//  Whatâ€™s being validated: Environment-based configuration, mapping availability, and the ability to execute a trivial query.
//  Success: Factory resolves Vast Online adapters and a phone search returns results in less than 500 ms.
// </auto-generated>
using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using CRMAdapter.Factory;
using CRMAdapter.Tests.TestUtilities.Fixtures;
using CRMAdapter.Tests.TestUtilities.Helpers;
using FluentAssertions;
using Microsoft.Data.SqlClient;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.SmokeTests;

[Collection("SqlServerContainer")]
public sealed class System_Smoke_AdapterFactory_ConfigValidation
{
    private readonly SqlServerContainerFixture _fixture;
    private readonly ITestOutputHelper _output;

    public System_Smoke_AdapterFactory_ConfigValidation(SqlServerContainerFixture fixture, ITestOutputHelper output)
    {
        _fixture = fixture;
        _output = output;
    }

    [Fact]
    [Trait("Type", "Smoke")]
    public async Task AdapterFactory_ShouldResolveVastOnlineAdapters()
    {
        await _fixture.ResetDatabaseAsync();

        var mappingPath = Path.Combine(Path.GetTempPath(), $"vastonline-smoke-{Guid.NewGuid():N}.json");
        await File.WriteAllTextAsync(mappingPath, MappingLoaderForTests.LoadMappingJson("vastonline-test-mapping.json"));

        var originalBackend = Environment.GetEnvironmentVariable("CRM_BACKEND");
        var originalMapping = Environment.GetEnvironmentVariable("CRM_MAPPING_PATH");

        Environment.SetEnvironmentVariable("CRM_BACKEND", "VAST_ONLINE");
        Environment.SetEnvironmentVariable("CRM_MAPPING_PATH", mappingPath);

        try
        {
            var bundle = AdapterFactory.CreateFromEnvironment(() => new SqlConnection(_fixture.ConnectionString));
            try
            {
                var stopwatch = Stopwatch.StartNew();
                var results = await bundle.CustomerAdapter.SearchByNameAsync("Ada", 5, CancellationToken.None);
                stopwatch.Stop();
                _output.WriteLine($"Smoke search duration: {stopwatch.ElapsedMilliseconds} ms");

                results.Should().NotBeEmpty();
                stopwatch.ElapsedMilliseconds.Should().BeLessThan(500);
            }
            finally
            {
                (bundle.CustomerAdapter as IDisposable)?.Dispose();
                (bundle.VehicleAdapter as IDisposable)?.Dispose();
                (bundle.InvoiceAdapter as IDisposable)?.Dispose();
                (bundle.AppointmentAdapter as IDisposable)?.Dispose();
            }
        }
        finally
        {
            Environment.SetEnvironmentVariable("CRM_BACKEND", originalBackend);
            Environment.SetEnvironmentVariable("CRM_MAPPING_PATH", originalMapping);
            if (File.Exists(mappingPath))
            {
                File.Delete(mappingPath);
            }
        }
    }
}
