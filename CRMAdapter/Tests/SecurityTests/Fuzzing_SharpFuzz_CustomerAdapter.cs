// <auto-generated>
//  Purpose: Provides a SharpFuzz harness targeting customer adapter search logic.
//  Whatâ€™s being validated: Adapter resilience against malformed name queries (overly long, Unicode, SQL meta characters).
//  Success: Harness executes without uncaught exceptions; SharpFuzz CI job flags any regressions.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Threading;
using CRMAdapter.CommonContracts;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using SharpFuzz;
using Xunit;

namespace CRMAdapter.Tests.SecurityTests;

public static class CustomerAdapterFuzzer
{
    public static void Run()
    {
        var fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");

        Fuzzer.Run(input =>
        {
            using var connection = FakeDbConnectionFactory.Create(
                FakeDbConnectionFactory.Plan(
                    "CustomerAdapter.SearchByName",
                    Array.Empty<IDictionary<string, object?>>()));

            using var adapter = new CustomerAdapter(connection, fieldMap);
            var query = input ?? string.Empty;

            try
            {
                _ = adapter.SearchByNameAsync(query, 25, CancellationToken.None).GetAwaiter().GetResult();
            }
            catch (InvalidAdapterRequestException)
            {
                // Expected for malformed inputs; treat as handled.
            }
        });
    }
}

public sealed class CustomerAdapterFuzzingDocumentation
{
    [Fact(Skip = "Execute via `dotnet sharpfuzz --target CRMAdapter.Tests.SecurityTests.CustomerAdapterFuzzer::Run`." )]
    [Trait("Type", "Security")]
    public void HarnessDocumentedForSharpFuzz() => Assert.True(true);
}
