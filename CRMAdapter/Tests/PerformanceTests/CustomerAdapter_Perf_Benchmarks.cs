// <auto-generated>
//  Purpose: Captures micro-benchmarks for the customer adapter hot paths.
//  Whatâ€™s being validated: Baseline execution time for GetById and SearchByName using deterministic fakes.
//  Success: Search and retrieval complete within the defined SLA to prevent performance regressions.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Threading;
using System.Threading.Tasks;
using BenchmarkDotNet.Attributes;
using BenchmarkDotNet.Running;
using CRMAdapter.CommonConfig;
using CRMAdapter.Tests.TestUtilities.Fakes;
using CRMAdapter.Tests.TestUtilities.Helpers;
using CRMAdapter.VastOnline.Adapter;
using FluentAssertions;
using Xunit;
using Xunit.Abstractions;

namespace CRMAdapter.Tests.PerformanceTests;

[MemoryDiagnoser]
[CategoriesColumn]
[SimpleJob(warmupCount: 1, iterationCount: 3)]
public class CustomerAdapterBenchmarks
{
    private FieldMap _fieldMap = default!;
    private Guid _customerId;

    [GlobalSetup]
    public void Setup()
    {
        _fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");
        _customerId = Guid.NewGuid();
    }

    [Benchmark]
    public void SearchByName()
    {
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.SearchByName",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = _customerId,
                        ["Name"] = "Ada Lovelace",
                        ["Email"] = "ada@example.com",
                        ["Phone"] = "+15555550123",
                        ["AddressLine1"] = "123 Innovation Way",
                        ["AddressLine2"] = string.Empty,
                        ["City"] = "London",
                        ["State"] = "LDN",
                        ["PostalCode"] = "EC1A 1BB",
                        ["Country"] = "GB"
                    }
                }),
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.LoadVehicleReferences",
                Array.Empty<IDictionary<string, object?>>()));

        using var adapter = new CustomerAdapter(connection, _fieldMap);
        adapter.SearchByNameAsync("Ada", 10, CancellationToken.None).GetAwaiter().GetResult();
    }
}

public sealed class CustomerAdapterPerformanceSmoke
{
    private readonly ITestOutputHelper _output;

    public CustomerAdapterPerformanceSmoke(ITestOutputHelper output)
    {
        _output = output;
    }

    [Fact]
    [Trait("Type", "Performance")]
    public async Task SearchByName_ShouldCompleteWithinBudget()
    {
        var fieldMap = MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");
        using var connection = FakeDbConnectionFactory.Create(
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.SearchByName",
                new[]
                {
                    new Dictionary<string, object?>
                    {
                        ["Id"] = Guid.NewGuid(),
                        ["Name"] = "Grace Hopper",
                        ["Email"] = "grace@example.com",
                        ["Phone"] = "+15555550111",
                        ["AddressLine1"] = "1 Navy Plaza",
                        ["AddressLine2"] = string.Empty,
                        ["City"] = "Arlington",
                        ["State"] = "VA",
                        ["PostalCode"] = "22202",
                        ["Country"] = "US"
                    }
                }),
            FakeDbConnectionFactory.Plan(
                "CustomerAdapter.LoadVehicleReferences",
                Array.Empty<IDictionary<string, object?>>()));

        using var adapter = new CustomerAdapter(connection, fieldMap);
        var stopwatch = Stopwatch.StartNew();
        var results = await adapter.SearchByNameAsync("Grace", 10, CancellationToken.None);
        stopwatch.Stop();
        _output.WriteLine($"CustomerAdapter.SearchByName duration: {stopwatch.ElapsedMilliseconds} ms");

        results.Should().NotBeEmpty();
        stopwatch.ElapsedMilliseconds.Should().BeLessThan(5, "fake pipeline should execute well under the SLA");
    }

    [Fact(Skip = "Run manually to collect BenchmarkDotNet statistics")] // Documented for nightly jobs.
    public void RunBenchmarks() => BenchmarkRunner.Run<CustomerAdapterBenchmarks>();
}
