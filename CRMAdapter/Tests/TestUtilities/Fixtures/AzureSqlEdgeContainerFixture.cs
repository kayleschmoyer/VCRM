// <auto-generated>
//  Purpose: Provides an Azure SQL Edge container fixture for compatibility testing of adapters.
//  What is being validated: Mirrors production-like Azure SQL Edge deployments to surface engine-specific regressions.
//  Success: Container starts and can be seeded using the shared scripts; failure highlights missing runtime dependencies.
// </auto-generated>
#nullable enable
using System;
using System.Data;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.Tests.TestUtilities.Helpers;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Configurations;
using DotNet.Testcontainers.Containers;
using Microsoft.Data.SqlClient;
using Xunit;

namespace CRMAdapter.Tests.TestUtilities.Fixtures;

/// <summary>
/// Azure SQL Edge test fixture mirroring production-grade deployments.
/// </summary>
public sealed class AzureSqlEdgeContainerFixture : IAsyncLifetime
{
    private readonly MsSqlTestcontainer _container;

    public AzureSqlEdgeContainerFixture()
    {
        var configuration = new MsSqlTestcontainerConfiguration
        {
            Password = "VcrmUltraSecure!123",
        };

        _container = new TestcontainersBuilder<MsSqlTestcontainer>()
            .WithDatabase(configuration)
            .WithImage("mcr.microsoft.com/azure-sql-edge")
            .WithName($"vcrm-tests-azuresql-{Guid.NewGuid():N}")
            .WithCleanUp(true)
            .Build();
    }

    public string ConnectionString => _container.ConnectionString;

    public FieldMap CreateFieldMap() => MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");

    public async Task InitializeAsync()
    {
        await _container.StartAsync();
        await SeedAsync();
    }

    public async Task DisposeAsync()
    {
        await _container.StopAsync();
        await _container.DisposeAsync();
    }

    private async Task SeedAsync()
    {
        var script = MappingLoaderForTests.LoadSqlScript("InitializeDatabase.sql");
        await using var connection = new SqlConnection(ConnectionString);
        await connection.OpenAsync();
        await using var command = connection.CreateCommand();
        command.CommandText = script;
        command.CommandType = CommandType.Text;
        command.CommandTimeout = 60;
        await command.ExecuteNonQueryAsync();
    }
}
