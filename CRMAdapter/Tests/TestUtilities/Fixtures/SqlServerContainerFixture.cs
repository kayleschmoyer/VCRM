// <auto-generated>
//  Purpose: Boots a hardened SQL Server container for integration and end-to-end tests.
//  What is being validated: Guarantees every test executes against a real SQL instance seeded with canonical data.
//  Success: Container starts, schema is hydrated, and Respawn checkpoints enable repeatable tests; failure surfaces startup or seeding issues.
// </auto-generated>
#nullable enable
using System;
using System.Data;
using System.Threading.Tasks;
using CRMAdapter.CommonConfig;
using CRMAdapter.Tests.TestUtilities.Helpers;
using DotNet.Testcontainers.Builders;
using DotNet.Testcontainers.Configurations;
using DotNet.Testcontainers.Containers;
using Microsoft.Data.SqlClient;
using Respawn;
using Xunit;

namespace CRMAdapter.Tests.TestUtilities.Fixtures;

/// <summary>
/// Shared SQL Server container used for integration tests.
/// </summary>
public sealed class SqlServerContainerFixture : IAsyncLifetime
{
    private readonly MsSqlTestcontainer _container;
    private Respawner? _respawner;

    public SqlServerContainerFixture()
    {
        var password = Environment.GetEnvironmentVariable("TEST_SQL_SA_PASSWORD")
            ?? throw new InvalidOperationException("Set TEST_SQL_SA_PASSWORD before running SQL integration tests.");
        var configuration = new MsSqlTestcontainerConfiguration
        {
            Password = password,
        };

        _container = new TestcontainersBuilder<MsSqlTestcontainer>()
            .WithDatabase(configuration)
            .WithImage("mcr.microsoft.com/mssql/server:2022-latest")
            .WithName($"vcrm-tests-sql-{Guid.NewGuid():N}")
            .WithCleanUp(true)
            .Build();
    }

    /// <summary>
    /// Gets the connection string for the running container.
    /// </summary>
    public string ConnectionString => _container.ConnectionString;

    /// <summary>
    /// Loads the canonical mapping used for Vast Online tests.
    /// </summary>
    public FieldMap CreateFieldMap() => MappingLoaderForTests.LoadFromEmbeddedResource("vastonline-test-mapping.json");

    /// <inheritdoc />
    public async Task InitializeAsync()
    {
        await _container.StartAsync();
        await RunSeedScriptAsync();
        _respawner = await RespawnResetHelper.CreateCheckpointAsync(ConnectionString);
    }

    /// <inheritdoc />
    public async Task DisposeAsync()
    {
        if (_respawner is not null)
        {
            _respawner = null;
        }

        await _container.StopAsync();
        await _container.DisposeAsync();
    }

    /// <summary>
    /// Resets the database state to the baseline seed data.
    /// </summary>
    public async Task ResetDatabaseAsync()
    {
        if (_respawner is not null)
        {
            await _respawner.ResetAsync(ConnectionString);
        }

        await RunSeedScriptAsync();
    }

    private async Task RunSeedScriptAsync()
    {
        var script = MappingLoaderForTests.LoadSqlScript("InitializeDatabase.sql");
        await using var connection = new SqlConnection(ConnectionString);
        await connection.OpenAsync();
        await using var command = connection.CreateCommand();
        command.CommandType = CommandType.Text;
        command.CommandText = script;
        command.CommandTimeout = 60;
        await command.ExecuteNonQueryAsync();
    }
}

/// <summary>
/// xUnit test collection used to share the SQL Server container across integration tests.
/// </summary>
[CollectionDefinition("SqlServerContainer")] // ReSharper disable once TestFileNameWarning
public sealed class SqlServerContainerCollection : ICollectionFixture<SqlServerContainerFixture>
{
}
