// <auto-generated>
//  Purpose: Provides deterministic construction helpers for canonical customers used in tests.
//  What is being validated: Ensures adapters emit canonical customers that match expected domain invariants.
//  Success: Returned builders create valid domain objects ready for assertions; failure indicates invalid canonical expectations.
// </auto-generated>
using System;
using System.Collections.Generic;
using Bogus;
using CRMAdapter.CommonDomain;

namespace CRMAdapter.Tests.TestUtilities.DataBuilders;

/// <summary>
/// Builds canonical <see cref="Customer"/> instances with deterministic data for repeatable tests.
/// </summary>
public sealed class CustomerBuilder
{
    private static readonly Faker Faker;

    static CustomerBuilder()
    {
        Randomizer.Seed = new Random(424242);
        Faker = new Faker(locale: "en_GB");
    }

    private Guid _id = Guid.NewGuid();
    private string _displayName = Faker.Name.FullName();
    private string _email = Faker.Internet.Email();
    private string _phone = "+15555550123";
    private PostalAddress _address = new("123 Innovation Way", string.Empty, "London", "LDN", "EC1A 1BB", "UK");
    private IReadOnlyCollection<VehicleReference> _vehicles = Array.Empty<VehicleReference>();

    public static CustomerBuilder Default() => new();

    public CustomerBuilder WithId(Guid id)
    {
        _id = id;
        return this;
    }

    public CustomerBuilder WithDisplayName(string value)
    {
        _displayName = value;
        return this;
    }

    public CustomerBuilder WithEmail(string value)
    {
        _email = value;
        return this;
    }

    public CustomerBuilder WithPhone(string value)
    {
        _phone = value;
        return this;
    }

    public CustomerBuilder WithAddress(PostalAddress address)
    {
        _address = address;
        return this;
    }

    public CustomerBuilder WithVehicles(IReadOnlyCollection<VehicleReference> vehicles)
    {
        _vehicles = vehicles;
        return this;
    }

    public Customer Build()
    {
        return new Customer(_id, _displayName, _email, _phone, _address, _vehicles);
    }
}
