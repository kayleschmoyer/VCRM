// <auto-generated>
//  Purpose: Captures structured log entries emitted by adapters so tests can assert on diagnostics.
//  What is being validated: Ensures adapters produce clear, sanitized log output for failure scenarios.
//  Success: Entries are recorded with level, message, exception, and context; failure means logging wiring regressed.
// </auto-generated>
#nullable enable
using System;
using System.Collections.Generic;
using CRMAdapter.CommonInfrastructure;

namespace CRMAdapter.Tests.TestUtilities.Helpers;

/// <summary>
/// In-memory <see cref="IAdapterLogger"/> implementation for verifying log output inside tests.
/// </summary>
public sealed class LoggingTestSink : IAdapterLogger
{
    private readonly List<LogEntry> _entries = new();

    public IReadOnlyList<LogEntry> Entries => _entries.AsReadOnly();

    public void LogDebug(string message, IReadOnlyDictionary<string, object?>? context = null)
        => Add("Debug", message, null, context);

    public void LogInformation(string message, IReadOnlyDictionary<string, object?>? context = null)
        => Add("Information", message, null, context);

    public void LogWarning(string message, IReadOnlyDictionary<string, object?>? context = null)
        => Add("Warning", message, null, context);

    public void LogError(string message, Exception? exception = null, IReadOnlyDictionary<string, object?>? context = null)
        => Add("Error", message, exception, context);

    private void Add(string level, string message, Exception? exception, IReadOnlyDictionary<string, object?>? context)
    {
        if (string.IsNullOrWhiteSpace(message))
        {
            throw new ArgumentException("Message must be provided.", nameof(message));
        }

        _entries.Add(new LogEntry(level, message, exception, context ?? new Dictionary<string, object?>()));
    }

    /// <summary>
    /// Captures a structured log entry from the adapter surface.
    /// </summary>
    public sealed record LogEntry(
        string Level,
        string Message,
        Exception? Exception,
        IReadOnlyDictionary<string, object?> Context);
}
