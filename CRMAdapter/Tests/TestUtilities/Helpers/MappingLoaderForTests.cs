// <auto-generated>
//  Purpose: Provides helper functions for loading canonical mapping definitions and seed scripts embedded in the test assembly.
//  What is being validated: Ensures tests always consume the same hardened mapping definitions and SQL seeds.
//  Success: Mapping and script retrieval succeeds; failure means required test resources are missing or misnamed.
// </auto-generated>
using System;
using System.IO;
using System.Reflection;
using System.Text;
using CRMAdapter.CommonConfig;

namespace CRMAdapter.Tests.TestUtilities.Helpers;

/// <summary>
/// Utility helpers that load mapping resources and SQL scripts from embedded test assets.
/// </summary>
public static class MappingLoaderForTests
{
    private const string MappingResourcePrefix = "CRMAdapter.Tests.TestUtilities.Fixtures.Resources.";
    private const string ScriptResourcePrefix = "CRMAdapter.Tests.TestUtilities.Fixtures.SeedScripts.";

    /// <summary>
    /// Loads a <see cref="FieldMap"/> from the embedded mapping resource.
    /// </summary>
    /// <param name="fileName">File name (without folder path).</param>
    public static FieldMap LoadFromEmbeddedResource(string fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName))
        {
            throw new ArgumentException("File name must be provided.", nameof(fileName));
        }

        using var stream = OpenResourceStream(MappingResourcePrefix + fileName);
        return FieldMap.LoadFromStream(stream);
    }

    /// <summary>
    /// Loads the raw JSON mapping content from the embedded resource for scenarios that require file persistence.
    /// </summary>
    /// <param name="fileName">Mapping file name.</param>
    /// <returns>JSON content.</returns>
    public static string LoadMappingJson(string fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName))
        {
            throw new ArgumentException("File name must be provided.", nameof(fileName));
        }

        using var stream = OpenResourceStream(MappingResourcePrefix + fileName);
        using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 4096, leaveOpen: false);
        return reader.ReadToEnd();
    }

    /// <summary>
    /// Loads a SQL script used for seeding integration databases.
    /// </summary>
    /// <param name="fileName">SQL resource file.</param>
    /// <returns>Script contents.</returns>
    public static string LoadSqlScript(string fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName))
        {
            throw new ArgumentException("File name must be provided.", nameof(fileName));
        }

        using var stream = OpenResourceStream(ScriptResourcePrefix + fileName);
        using var reader = new StreamReader(stream, Encoding.UTF8, detectEncodingFromByteOrderMarks: true, bufferSize: 4096, leaveOpen: false);
        return reader.ReadToEnd();
    }

    /// <summary>
    /// Creates a <see cref="FieldMap"/> from a JSON string.
    /// </summary>
    /// <param name="json">Raw mapping JSON.</param>
    /// <returns><see cref="FieldMap"/> instance.</returns>
    public static FieldMap LoadFromJson(string json)
    {
        if (json is null)
        {
            throw new ArgumentNullException(nameof(json));
        }

        using var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));
        return FieldMap.LoadFromStream(stream);
    }

    private static Stream OpenResourceStream(string resourceName)
    {
        var assembly = Assembly.GetExecutingAssembly();
        var stream = assembly.GetManifestResourceStream(resourceName);
        if (stream is null)
        {
            throw new InvalidOperationException($"Embedded resource '{resourceName}' was not found. Ensure the file Build Action is set to EmbeddedResource.");
        }

        return stream;
    }
}
